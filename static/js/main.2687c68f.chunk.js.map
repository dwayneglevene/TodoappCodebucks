{"version":3,"sources":["components/TodoApp.js","App.js","serviceWorker.js","index.js"],"names":["TodoApp","useState","task","setTask","tasklist","setTaskList","className","type","name","onChange","e","target","value","handleChange","id","placeholder","onClick","taskDetails","Math","floor","random","isCompleted","map","t","preventDefault","element","findIndex","elem","newTaskList","taskCompleted","filter","deletetask","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SAwEeA,MArEf,WAAoB,IAAD,EAESC,mBAAS,IAFlB,mBAERC,EAFQ,KAEFC,EAFE,OAGiBF,mBAAS,IAH1B,mBAGRG,EAHQ,KAGEC,EAHF,KA8Cf,OAAQ,yBAAKC,UAAU,QAGnB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,SAAU,SAAAC,GAAC,OA5CzB,SAACA,GAClBP,EAAQO,EAAEC,OAAOC,OA2C6BC,CAAaH,IAAII,GAAG,OAAOC,YAAY,aACrF,4BAAQT,UAAU,UAAUU,QAxChB,WAEZ,GAAa,KAATd,EAAa,CACb,IAAMe,EAAc,CAChBH,GAAII,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBR,MAAOV,EACPmB,aAAa,GAGjBhB,EAAY,GAAD,mBAAKD,GAAL,CAAea,QA+B9B,OAECb,IAAY,GACb,4BACCA,EAASkB,KAAI,SAACC,GAAD,OAEV,wBAAIjB,UAAWiB,EAAEF,YAAc,YAAc,YAAaE,EAAEX,MAE5D,4BAAQN,UAAU,YAAYU,QAAS,SAACN,GAAD,OA7BzB,SAACA,EAAEI,GACrBJ,EAAEc,iBAEF,IAAMC,EAAUrB,EAASsB,WAAU,SAAAC,GAAI,OAAIA,EAAKb,IAAMA,KAGhDc,EAAW,YAAOxB,GAIxBwB,EAAYH,GAAZ,2BAEWG,EAAYH,IAFvB,IAGQJ,aAAY,IAErBhB,EAAYuB,GAcuCC,CAAcnB,EAAEa,EAAET,MAAhE,aAEA,4BAAQR,UAAU,SAASU,QAAS,SAACN,GAAD,OApCzB,SAACA,EAAEI,GAClBJ,EAAEc,iBACFnB,EAAYD,EAAS0B,QAAO,SAAAP,GAAC,OAAIA,EAAET,IAAMA,MAkCMiB,CAAWrB,EAAEa,EAAET,MAA1D,eAID,OCvDIkB,MATf,WACE,OACE,yBAAK1B,UAAU,OACb,0BAAMA,UAAU,SAAhB,aADF,IAC2C,6BACzC,kBAAC,EAAD,QCKc2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2687c68f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./todoapp.css\";\n\nfunction TodoApp() {\n\n    const [task, setTask] = useState(\"\");\n    const [tasklist, setTaskList] = useState([]);\n\n    const handleChange = (e) => {\n        setTask(e.target.value)\n        // 547\n    }\n\n    const AddTask = () => {\n\n        if (task !== \"\") {\n            const taskDetails = {\n                id: Math.floor(Math.random() * 1000),\n                value: task,\n                isCompleted: false,\n            }\n\n            setTaskList([...tasklist, taskDetails]);\n        }\n    }\n\n\n    const deletetask = (e,id) =>{\n        e.preventDefault();\n        setTaskList(tasklist.filter(t => t.id != id))\n    };\n\n    const taskCompleted = (e,id) =>{\n        e.preventDefault();\n        //lets find index of element\n        const element = tasklist.findIndex(elem => elem.id == id);\n\n        //copy array into new variable\n        const newTaskList = [...tasklist];\n\n        //edit our element\n\n        newTaskList[element] ={\n            // ...newTaskList[element] = {\n                ...newTaskList[element],\n                isCompleted:true,\n            }\n       setTaskList(newTaskList);\n    }\n    return (<div className=\"todo\">\n\n\n        <input type=\"text\" name=\"text\" onChange={e => handleChange(e)} id=\"text\" placeholder=\"Add Task\" />\n        <button className=\"add-btn\" onClick={AddTask}>Add</button>\n        \n        {tasklist !==[] ?  (\n        <ul>\n        {tasklist.map((t) =>(\n           \n            <li className={t.isCompleted ? \"crossText\" : \"listitem\"}>{t.value}\n         \n            <button className=\"completed\" onClick={(e) => taskCompleted(e,t.id)}>Completed</button>\n\n            <button className=\"delete\" onClick={(e) => deletetask(e,t.id)}>Delete</button>\n   </li>\n        ))}\n        </ul>\n        ): null}\n    \n    </div >);\n}\n\nexport default TodoApp;","import React from \"react\";\nimport \"./App.css\";\nimport TodoApp from \"./components/TodoApp\"\nfunction App() {\n  return (\n    <div className=\"App\">\n      <span className=\"title\">Todo List</span> <br />\n      <TodoApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}